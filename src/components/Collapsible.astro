---
// src/components/Collapsible.astro
import { Icon } from '@astrojs/starlight/components';

export interface Props {
  title?: string;
  level?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
  startOpen?: boolean;
}

const {
  title = 'Ver Detalles',
  level = 'h3',
  startOpen = false,
} = Astro.props;

const HeadingTag = level;
const uniqueId = `collapsible-${Math.random().toString(36).substring(2, 9)}`;
---

<div class="collapsible-container">
  <HeadingTag
    class="collapsible-header"
    id=`${uniqueId}-header`
    aria-expanded={startOpen}
    aria-controls=`${uniqueId}-content`
    tabindex="0"
  >
    <span>{title}</span>
    <span class="collapsible-arrow" aria-hidden="true">
      <Icon name="right-caret" size="1.2em" />
    </span>
  </HeadingTag>

  <div
    class="collapsible-content"
    id=`${uniqueId}-content`
    hidden={!startOpen}
  >
    <div class="collapsible-content-inner">
      <slot />
    </div>
  </div>
</div>

<style>
  .collapsible-container {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.375rem;
    background-color: var(--sl-color-bg-inset);
    margin-block: 1rem;
  }

  .collapsible-header {
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    width: 100%;
    padding: 0.75rem 1rem;
    transition: background-color 0.2s ease-in-out;
  }

  .collapsible-header:hover {
    background-color: var(--sl-color-gray-6);
  }

  .collapsible-header:focus-visible {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 2px;
    border-radius: 0.25rem;
  }

  .collapsible-header[aria-expanded="true"] .collapsible-arrow {
    transform: rotate(90deg);
  }

  .collapsible-arrow {
    transform-origin: center;
    color: var(--sl-color-text-accent);
    flex-shrink: 0;
    /* --- FIX: Added transition for the transform property --- */
    transition: transform 0.2s ease-in-out;
  }

  .collapsible-content {
    overflow: hidden;
  }

  .collapsible-content-inner {
    padding: 0.5rem 1rem 1rem;
    overflow-x: auto;
  }
</style>

<script is:inline define:vars={{ uniqueId }}>
  function adjustTag() {
    var body = document.querySelector("body") || document.documentElement;
    var browserWidth = body.clientWidth;
    var eqnWidth = 0;
    var tagWidth = 0;
  
    let tags = document.querySelectorAll(".katex-html .tag");
  
    for (let i = 0; i < tags.length; i++) {
      let parent = tags[i].parentNode;
      let base;
      if (parent) {
        base = parent.querySelector(".base");
      }
      eqnWidth = base ? base.clientWidth : 0;
      tagWidth = tags[i].clientWidth;
  
      tags[i].style.border = "";
  
      if (1.1 * eqnWidth + 2 * tagWidth > browserWidth) {
        tags[i].style.display = "inline-block";
        tags[i].style.marginLeft = "8px";
        tags[i].style.position = "static";
      } else {
        tags[i].style.background = "";
        tags[i].style.position = "absolute";
        tags[i].style.right = "2px";
      }
    }
  }
  const header = document.getElementById(`${uniqueId}-header`);
  const content = document.getElementById(`${uniqueId}-content`);

  header.addEventListener('click', () => {
    const isExpanded = header.getAttribute('aria-expanded') === 'true';
    
    // Toggle the state
    if (isExpanded) {
      content.setAttribute('hidden', '');
      header.setAttribute('aria-expanded', 'false');
    } else {
      content.removeAttribute('hidden');
      header.setAttribute('aria-expanded', 'true');
      adjustTag();
    }
  });

  header.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      header.click();
    }
  });
</script>
